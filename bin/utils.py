import random
import string
import bencodepy
import socket
import subprocess
import logging

bc = bencodepy.Bencode(
    encoding='utf-8'
)

def gen_cookie(length):
    """ Genarate a random for cookie. 

    Args:
      length: Length of the desired random string.
    
    Returns:
      A string with a given length made of random ASCII lowercase
      characters.
    """
    return ''.join(random.choice(string.ascii_lowercase) for i in range(length))

def send(args, file, bind_address, bind_port):
    """ Send a JSON file to RTPengine on the given ports.

    Args:
      args: An object with the user settings. 
      file: A dictionary which describes the RTPengine ng commands.
      bind_address: Source IPv4 address. 
      bind_port: Source port. 
    
    Returns:
      An object containing the RTPengine response. 
    """

    # Generate and send ng message
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind((bind_address, bind_port))
    logging.debug("Socket bound to %s, %s", str(bind_address), str(bind_port))
    
    cookie = gen_cookie(5)
    data = bencodepy.encode(file).decode()
    message = str(cookie) + " " + str(data)
    logging.debug("Message generated: %s", message)
    byte_sent = sock.sendto(message.encode('utf-8'), (args.addr, args.port))
    logging.debug("%s, byte sent.", str(byte_sent))

    response = sock.recv(4096)

    data = response.decode()
    data = data.split(" ", 1)
    result = bc.decode(data[1])
    logging.debug("Received message: %s", str(result))

    sock.close()
    logging.debug("Socket closed.")
    logging.info("Message sent to RTPengine and got response.")

    return result

def ffmpeg(args, cnt, offer_rtp_address, answer_rtp_address):
    """ Send RTP traffic to a given address with ffmpeg.

    With ffmpeg you can control how the media stream should be send
    out. For example you can change the codec if it is needed. 

    Args:
      args: An object with the user settings. 
      cnt: How many streams should be generated by ffmpeg. 
      offer_rtp_address: A list of rtp addresses with the offer port.
      answer_rtp_address: 
        A list of answer addresses with the answer port. 
    """
    
    processes = []
    for c in range(cnt):
        processes.append(subprocess.Popen(["ffmpeg", "-re", "-i", 
            args.audio_file, "-ar", "8000", "-ac", "1", "-acodec",
            "pcm_mulaw", "-f", "rtp", offer_rtp_address[c]]))
        processes.append(subprocess.Popen(["ffmpeg", "-re", "-i",
            args.audio_file, "-ar", "8000", "-ac", "1", "-acodec", 
            "pcm_mulaw", "-f", "rtp", answer_rtp_address[c]]))

    # Close the processes
    for process in processes:
        process.communicate()